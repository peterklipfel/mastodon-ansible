- name: Install systemd sidekiq Service Files
  template:
    src: ../files/systemd/mastodon-sidekiq.service.j2
    dest: /etc/systemd/system/mastodon-sidekiq.service
  become: true
  become_user: root

- name: Install systemd web Service Files
  template:
    src: ../files/systemd/mastodon-web.service.j2
    dest: /etc/systemd/system/mastodon-web.service
  become: true
  become_user: root

- name: Install systemd streaming Service Files
  template:
    src: ../files/systemd/mastodon-streaming.service.j2
    dest: /etc/systemd/system/mastodon-streaming.service
  become: true
  become_user: root

- name: Media cleanup cronjob
  cron:
    name: "media cleanup"
    minute: "15"
    hour: "1"
    job: '/bin/bash -c ''export PATH="$HOME/.rbenv/bin:$PATH"; eval "$(rbenv init -)"; cd {{ mastodon_home }}/{{ mastodon_path }} && RAILS_ENV=production ./bin/tootctl media remove'''

- stat: path={{ mastodon_home }}/{{ mastodon_path }}/.env.production
  register: production_config

- name: Generate SECRET_KEY_BASE secret
  shell: "RAILS_ENV=production ~/.rbenv/shims/bundle exec rake secret"
  args:
    chdir: "{{ mastodon_home }}/{{ mastodon_path }}"
  register: secret_key_base
  when: not production_config.stat.exists

- name: Generate OTP_SECRET secret
  shell: "RAILS_ENV=production ~/.rbenv/shims/bundle exec rake secret"
  args:
    chdir: "{{ mastodon_home }}/{{ mastodon_path }}"
  register: otp_secret
  when: not production_config.stat.exists

- name: "Generate VAPID key pair into {{ mastodon_home }}/{{ mastodon_path }}/vapid.tmp"
  shell: "RAILS_ENV=production ~/.rbenv/shims/bundle exec rake mastodon:webpush:generate_vapid_key > {{ mastodon_home }}/{{ mastodon_path }}/vapid.tmp | head -1 | cut -c 19-"
  args:
    chdir: "{{ mastodon_home }}/{{ mastodon_path }}"
  when: not production_config.stat.exists

- name: Get VAPID_PRIVATE_KEY secret
  shell: "cat {{ mastodon_home }}/{{ mastodon_path }}/vapid.tmp | head -1 | cut -c 19-"
  register: vapid_private_key
  when: not production_config.stat.exists

- name: Get VAPID_PUBLIC_KEY secret
  shell: "cat {{ mastodon_home }}/{{ mastodon_path }}/vapid.tmp | tail -1 | cut -c 18-"
  register: vapid_public_key
  when: not production_config.stat.exists

- name: Ensure that the file used for vapid keypair generation is removed.
  ansible.builtin.file:
    path: "{{ mastodon_home }}/{{ mastodon_path }}/vapid.tmp"
    state: absent

- name: Install Production env file
  template:
    src: files/mastodon/env.production.j2
    dest: "{{ mastodon_home }}/{{ mastodon_path }}/.env.production"
  when: not production_config.stat.exists

- name: Create database
  shell: "RAILS_ENV=production ~/.rbenv/shims/bundle exec rails db:setup"
  args:
    chdir: "{{ mastodon_home }}/{{ mastodon_path }}"
  environment:
    SAFETY_ASSURED: 1
  when: not production_config.stat.exists

- name: Migrate database
  shell: "RAILS_ENV=production ~/.rbenv/shims/bundle exec rails db:migrate"
  args:
    chdir: "{{ mastodon_home }}/{{ mastodon_path }}"
  when: production_config.stat.exists

- name: Ensure that we have correct file permissions with owner being the user and NGINX being the group
  become: yes
  become_user: root
  file:
    path: "{{ mastodon_home }}/{{ mastodon_path }}"
    owner: "{{ mastodon_user }}"
    group: "nginx"
    recurse: yes
  when:
    - ansible_os_family == "RedHat"

- name: Set mastodon home as part of the www-data group so that the following permissions are usable
  become: yes
  become_user: root
  user:
    name:   {{ mastodon_user }}
    group:  www-data
    append: yes

- name: ensure that mastodon has access to www-data stuff as well
  become: yes
  become_user: root
  file:
    path: "{{ mastodon_home }}"
    owner: "{{ mastodon_user }}"
    group: "www-data"
    recurse: no
  when:
    - ansible_os_family == "Debian"

- name: Ensure that we have correct file permissions with owner being the user and www-data being the group
  become: yes
  become_user: root
  file:
    path: "{{ mastodon_home }}/{{ mastodon_path }}"
    owner: "{{ mastodon_user }}"
    group: "www-data"
    recurse: yes
  when:
    - ansible_os_family == "Debian"

- name: Ensure that we have correct selinux context permissions for RedHat systems
  become: yes
  become_user: root
  community.general.sefcontext:
    target: '{{ mastodon_home }}/{{ mastodon_path }}/public(/.*)?'
    setype: httpd_sys_content_t
    state: present
  when:
    - ansible_os_family == "RedHat"

- name: restore selinux condition on RedHat systems
  become: yes
  become_user: root
  ansible.builtin.command: restorecon -irv {{ mastodon_home }}/{{ mastodon_path }}/public
  when:
    - ansible_os_family == "RedHat"

# Asset precompilation moved to packer step

- name: "Start and enable Mastodon services"
  become: yes
  #Workaround for "Interactive authentication required" issue
  become_user: root
  service: "name={{ item }} state=started enabled=yes"
  with_items:
  - mastodon-web.service
  - mastodon-streaming.service
  - mastodon-sidekiq.service
